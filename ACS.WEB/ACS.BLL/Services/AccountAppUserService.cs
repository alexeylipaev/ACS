using ACS.BLL.DTO; using ACS.BLL.Infrastructure; using ACS.BLL.Interfaces; using ACS.DAL.Entities; using ACS.DAL.Interfaces; using AutoMapper; using Microsoft.AspNet.Identity; using System; using System.Collections; using System.Collections.Generic; using System.Diagnostics; using System.Linq; using System.Security.Claims; using System.Text; using System.Threading.Tasks;  namespace ACS.BLL.Services {     public class AccountAppUserService : ServiceBase,IAccountAppUserService     {
        private ApplicationUserService applicationUserService { get;set;}
        private ApplicationRoleService applicationRoleService { get; set; }
        public AccountAppUserService(IUnitOfWork uow) : base(uow)
        {
            applicationUserService = new ApplicationUserService(uow);
            applicationRoleService = new ApplicationRoleService(uow);
        }          public async Task<OperationDetails> AddLoginAsync(int userId, UserLoginInfo login)         {             var result = await Database.UserManager.AddLoginAsync(userId, login);              if (result.Errors.Count() > 0)                 return new OperationDetails(false, result.Errors.FirstOrDefault(), "");              return new OperationDetails(true, result.Errors.FirstOrDefault(), "");         }          public async Task<ClaimsIdentity> Authenticate(ApplicationUserDTO ApplicationUserDTO)         {             ClaimsIdentity claim = null;             // находим пользователя             ApplicationUser user = await Database.UserManager.FindAsync(ApplicationUserDTO.Email, ApplicationUserDTO.PasswordHash);             // авторизуем его и возвращаем объект ClaimsIdentity             if (user != null)                 claim = await Database.UserManager.CreateIdentityAsync(user,                                             DefaultAuthenticationTypes.ApplicationCookie);             return claim;         }          public async Task<OperationDetails> ConfirmEmailAsync(int UserId, string token)         {              var result = await Database.UserManager.ConfirmEmailAsync(UserId, token);             if (result.Errors.Count() > 0)                 return new OperationDetails(false, result.Errors.FirstOrDefault(), "Ошибка подтверждения");             else                 return new OperationDetails(true, "Регистрация успешно подтверждена", "");         }

        public async Task<OperationDetails> CreateAsync(ApplicationUserDTO applicationUserDTO)         {
            return await applicationUserService.CreateOrUpdateAsync(applicationUserDTO);
        }          public ApplicationUserDTO FindByEmail(string Email)         {
          return  applicationUserService.FindByEmail(Email);         }   public async Task<ApplicationUserDTO> FindByEmailAsync(string Email)         {
            return await applicationUserService.FindByEmailAsync(Email);         }          public async Task<ApplicationUserDTO> FindByNameAsync(string userName)         {
            return await applicationUserService.FindByNameAsync(userName);         }          public ApplicationRoleDTO FindRoleById(int roleId)         {
            return applicationRoleService.FindById(roleId);         }          public async Task<string> GenerateEmailConfirmationTokenAsync(int userId)         {             string code = await Database.UserManager.GenerateEmailConfirmationTokenAsync(userId);              return code;         }          public async Task<string> GeneratePasswordResetTokenAsync(int userId)         {             var data = await Database.UserManager.GeneratePasswordResetTokenAsync(userId);              return data;         }          /// <summary>         /// Назначить роль         /// </summary>         /// <param name="RoleId"></param>         /// <param name="UserId">Null если нужно создать роль для нового пользователя, not null если пользователь уже есть в БД, поместить его ID</param>         /// <returns></returns>         public AppUserRoleDTO GetAppUserRoleAssignmentData(int RoleId, int? UserId = null)         {
            return applicationRoleService.GetAppUserRoleAssignmentData( RoleId, UserId = null);         }          /// <summary>     /// Получить ID нового объекта     /// </summary>     /// <returns></returns>         public int GetIdNewAppUser()         {
            return applicationRoleService.GetIdNewAppUser();         }          public async Task<bool> IsEmailConfirmedAsync(int userId)         {             var data = await Database.UserManager.IsEmailConfirmedAsync(userId);              return data;         }          public bool IsInRole(string userName, string role)         {
           return applicationRoleService.IsInRole(userName, role);         }          public async Task<OperationDetails> ResetPasswordAsync(int userId, string token, string newPassword)         {             var result = await Database.UserManager.ResetPasswordAsync(userId, token, newPassword);              if (result.Errors.Count() > 0)                 return new OperationDetails(false, result.Errors.FirstOrDefault(), "Ошибка сброса пароля");             else                 return new OperationDetails(true, "Пароль успешно сброшен", "");         }          public async Task SendEmailAsync(int userId, string subject, string body)         {             await Database.UserManager.SendEmailAsync(userId, subject, body);         }          // начальная инициализация бд         public async Task SetInitialData(ApplicationUserDTO adminDto, List<string> roles)         {             foreach (string roleName in roles)             {                 var role = await Database.RoleManager.FindByNameAsync(roleName);                 if (role == null)                 {                     role = new ApplicationRole { Name = roleName };                     await Database.RoleManager.CreateAsync(role);                 }             }              var appUser = await Database.UserManager.FindByEmailAsync(adminDto.Email);              if (appUser == null)                 await CreateAsync(adminDto);         }
        public IEnumerable<ApplicationUserDTO> GetUsers()
        {
            return applicationUserService.GetApplicationUsers();
        }          public void Dispose()         {             Database.Dispose();
            applicationUserService.Dispose();
            applicationRoleService.Dispose();         }

 
    } } 